function [trainedClassifier, validationAccuracy] = ...
    trainLinearSVM(trainingData, predictorNames, classNames)
% [trainedClassifier, validationAccuracy] = trainClassifier(trainingData)
% returns a trained classifier and its accuracy. This code recreates the
% classification model trained in Classification Learner app. Use the
% generated code to automate training the same model with new data, or to
% learn how to programmatically train models.
%
%  Input:
%      trainingData: a table containing the same predictor and response
%       columns as imported into the app.
%
%  Output:
%      trainedClassifier: a struct containing the trained classifier. The
%       struct contains various fields with information about the trained
%       classifier.
%
%      trainedClassifier.predictFcn: a function to make predictions on new
%       data.
%
%      validationAccuracy: a double containing the accuracy in percent. In
%       the app, the History list displays this overall accuracy score for
%       each model.
%
% Use the code to train the model with new data. To retrain your
% classifier, call the function from the command line with your original
% data or new data as the input argument trainingData.
%
% For example, to retrain a classifier trained with the original data set
% T, enter:
%   [trainedClassifier, validationAccuracy] = trainClassifier(T)
%
% To make predictions with the returned 'trainedClassifier' on new data T2,
% use
%   yfit = trainedClassifier.predictFcn(T2)
%
% T2 must be a table containing at least the same predictor columns as used
% during training. For details, enter:
%   trainedClassifier.HowToPredict

% based on the code that was 
% Auto-generated by MATLAB on 13-Jul-2019 21:21:41


% Extract predictors and response
% This code processes the data into the right shape for training the
% model.
inputTable = trainingData;
predictors = inputTable(:, predictorNames);
response = inputTable.fullLabels;
isCategoricalPredictor=false(size(predictorNames)); 

% Train a classifier
% This code specifies all the classifier options and trains the classifier.
template = templateSVM(...
    'KernelFunction', 'linear', ...
    'PolynomialOrder', [], ...
    'KernelScale', 'auto', ...
    'BoxConstraint', 1, ...
    'SaveSupportVectors',true,...
    'Standardize', true);
% 
classificationSVM = fitcecoc(...
    predictors, ...
    response, ...
    'Learners', template, ...
    'Coding', 'onevsone', ...
    'ClassNames', classNames, ...
    'Options',statset('UseParallel',true));


% Create the result struct with predict function
predictorExtractionFcn = @(t) t(:, predictorNames);
svmPredictFcn = @(x) predict(classificationSVM, x);
trainedClassifier.predictFcn = @(x) svmPredictFcn(predictorExtractionFcn(x));

% Add additional fields to the result struct
% trainedClassifier.RequiredVariables = {'fullFeatures1', 'fullFeatures2', 'fullFeatures3', 'fullFeatures4', 'fullFeatures5', 'fullFeatures6', 'fullFeatures7', 'fullFeatures8', 'fullFeatures9', 'fullFeatures10', 'fullFeatures11', 'fullFeatures12', 'fullFeatures13', 'fullFeatures14', 'fullFeatures15', 'fullFeatures16', 'fullFeatures17', 'fullFeatures18', 'fullFeatures19', 'fullFeatures20', 'fullFeatures21', 'fullFeatures22', 'fullFeatures23', 'fullFeatures24', 'fullFeatures25', 'fullFeatures26', 'fullFeatures27', 'fullFeatures28', 'fullFeatures29', 'fullFeatures30', 'fullFeatures31', 'fullFeatures32', 'fullFeatures33', 'fullFeatures34', 'fullFeatures35', 'fullFeatures36', 'fullFeatures37', 'fullFeatures38', 'fullFeatures39', 'fullFeatures40', 'fullFeatures41', 'fullFeatures42', 'fullFeatures43', 'fullFeatures44', 'fullFeatures45', 'fullFeatures46', 'fullFeatures47', 'fullFeatures48', 'fullFeatures49', 'fullFeatures50', 'fullFeatures51', 'fullFeatures52', 'fullFeatures53', 'fullFeatures54', 'fullFeatures55', 'fullFeatures56', 'fullFeatures57', 'fullFeatures58', 'fullFeatures59', 'fullFeatures60', 'fullFeatures61', 'fullFeatures62', 'fullFeatures63', 'fullFeatures64', 'fullFeatures65', 'fullFeatures66', 'fullFeatures67', 'fullFeatures68', 'fullFeatures69', 'fullFeatures70', 'fullFeatures71', 'fullFeatures72', 'fullFeatures73', 'fullFeatures74', 'fullFeatures75', 'fullFeatures76', 'fullFeatures77', 'fullFeatures78', 'fullFeatures79', 'fullFeatures80', 'fullFeatures81', 'fullFeatures82', 'fullFeatures83', 'fullFeatures84', 'fullFeatures85', 'fullFeatures86', 'fullFeatures87', 'fullFeatures88', 'fullFeatures89', 'fullFeatures90', 'fullFeatures91', 'fullFeatures92', 'fullFeatures93', 'fullFeatures94', 'fullFeatures95', 'fullFeatures96', 'fullFeatures97', 'fullFeatures98', 'fullFeatures99', 'fullFeatures100', 'fullFeatures101', 'fullFeatures102', 'fullFeatures103', 'fullFeatures104', 'fullFeatures105', 'fullFeatures106', 'fullFeatures107', 'fullFeatures108', 'fullFeatures109', 'fullFeatures110'};
trainedClassifier.RequiredVariables = predictorNames;
trainedClassifier.ClassificationSVM = classificationSVM;
trainedClassifier.About = 'This struct is a trained model exported from Classification Learner R2018b.';
trainedClassifier.HowToPredict = sprintf('To make predictions on a new table, T, use: \n  yfit = c.predictFcn(T) \nreplacing ''c'' with the name of the variable that is this struct, e.g. ''trainedModel''. \n \nThe table, T, must contain the variables returned by: \n  c.RequiredVariables \nVariable formats (e.g. matrix/vector, datatype) must match the original training data. \nAdditional variables are ignored. \n \nFor more information, see <a href="matlab:helpview(fullfile(docroot, ''stats'', ''stats.map''), ''appclassification_exportmodeltoworkspace'')">How to predict using an exported model</a>.');

% Perform cross-validation
partitionedModel = crossval(trainedClassifier.ClassificationSVM, 'KFold', 5);

% Compute validation predictions
% [validationPredictions, validationScores] = kfoldPredict(partitionedModel);

% Compute validation accuracy
validationAccuracy = 1 - kfoldLoss(partitionedModel, 'LossFun', 'ClassifError');
